// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid()) @map("_id") 
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  accounts       Account[]
  assistants     Assistant[]

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Account {
  id                String @id @default(uuid()) @map("_id") 
  userId            String 
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Assistant {
  id           String @id @default(uuid()) @map("_id") 
  name         String
  title        String?
  instructions String?
  placeholder  String?

  image        Image?
  messages     Message[]

  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model Image {
  id          String    @id @default(uuid()) @map("_id") 
  url         String
  publicId    String

  assistantId String    @unique
  assistant   Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
}

model Message {
  id               String    @id @default(uuid()) @map("_id") 
  userMessage      String
  assistantMessage String
  sessionToken     String

  assistantId      String
  assistant        Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([assistantId])
}